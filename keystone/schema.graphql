# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  last_name: String
  email: String
  password: PasswordState
  user_type: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  last_name: StringFilter
  email: StringFilter
  user_type: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  last_name: OrderDirection
  email: OrderDirection
  user_type: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  last_name: String
  email: String
  password: String
  user_type: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  last_name: String
  email: String
  password: String
  user_type: String
}

type MediaTable {
  id: ID!
  title: String
  text: MediaTable_text_Document
  content: Content
}

type MediaTable_text_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input MediaTableWhereUniqueInput {
  id: ID
}

input MediaTableWhereInput {
  AND: [MediaTableWhereInput!]
  OR: [MediaTableWhereInput!]
  NOT: [MediaTableWhereInput!]
  id: IDFilter
  title: StringFilter
  content: ContentWhereInput
}

input MediaTableOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input MediaTableUpdateInput {
  title: String
  text: JSON
  content: ContentRelateToOneForUpdateInput
}

input ContentRelateToOneForUpdateInput {
  create: ContentCreateInput
  connect: ContentWhereUniqueInput
  disconnect: Boolean
}

input MediaTableUpdateArgs {
  where: MediaTableWhereUniqueInput!
  data: MediaTableUpdateInput!
}

input MediaTableCreateInput {
  title: String
  text: JSON
  content: ContentRelateToOneForCreateInput
}

input ContentRelateToOneForCreateInput {
  create: ContentCreateInput
  connect: ContentWhereUniqueInput
}

type Image {
  id: ID!
  name: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ImageUpdateInput {
  name: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  image: ImageFieldInput
}

type Video {
  id: ID!
  name: String
  file: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input VideoUpdateInput {
  name: String
  file: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  file: FileFieldInput
}

type AudioFile {
  id: ID!
  name: String
  file: FileFieldOutput
}

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: FileFieldInput
}

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: FileFieldInput
}

type Content {
  id: ID!
  name: String
  description: String
  media_id: MediaTable
  user_id: User
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  media_id: MediaTableWhereInput
  user_id: UserWhereInput
}

input ContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input ContentUpdateInput {
  name: String
  description: String
  media_id: MediaTableRelateToOneForUpdateInput
  user_id: UserRelateToOneForUpdateInput
}

input MediaTableRelateToOneForUpdateInput {
  create: MediaTableCreateInput
  connect: MediaTableWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  name: String
  description: String
  media_id: MediaTableRelateToOneForCreateInput
  user_id: UserRelateToOneForCreateInput
}

input MediaTableRelateToOneForCreateInput {
  create: MediaTableCreateInput
  connect: MediaTableWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Question {
  id: ID!
  description: String
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  description: StringFilter
}

input QuestionOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input QuestionUpdateInput {
  description: String
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  description: String
}

type Answer {
  id: ID!
  answer: Int
  question_id: Question
  user_id: User
}

input AnswerWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
  id: IDFilter
  answer: IntNullableFilter
  question_id: QuestionWhereInput
  user_id: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AnswerOrderByInput {
  id: OrderDirection
  answer: OrderDirection
}

input AnswerUpdateInput {
  answer: Int
  question_id: QuestionRelateToOneForUpdateInput
  user_id: UserRelateToOneForUpdateInput
}

input QuestionRelateToOneForUpdateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
}

input AnswerUpdateArgs {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateInput!
}

input AnswerCreateInput {
  answer: Int
  question_id: QuestionRelateToOneForCreateInput
  user_id: UserRelateToOneForCreateInput
}

input QuestionRelateToOneForCreateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

type Assignment {
  id: ID!
  title: String
  description: String
  user_id: User
}

input AssignmentWhereUniqueInput {
  id: ID
}

input AssignmentWhereInput {
  AND: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  NOT: [AssignmentWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  user_id: UserWhereInput
}

input AssignmentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input AssignmentUpdateInput {
  title: String
  description: String
  user_id: UserRelateToOneForUpdateInput
}

input AssignmentUpdateArgs {
  where: AssignmentWhereUniqueInput!
  data: AssignmentUpdateInput!
}

input AssignmentCreateInput {
  title: String
  description: String
  user_id: UserRelateToOneForCreateInput
}

type Session {
  id: ID!
  start_date: DateTime
  end_date: DateTime
  entry_code: Int
  user_id: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SessionWhereUniqueInput {
  id: ID
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  start_date: DateTimeNullableFilter
  end_date: DateTimeNullableFilter
  entry_code: IntNullableFilter
  user_id: UserWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SessionOrderByInput {
  id: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  entry_code: OrderDirection
}

input SessionUpdateInput {
  start_date: DateTime
  end_date: DateTime
  entry_code: Int
  user_id: UserRelateToOneForUpdateInput
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  start_date: DateTime
  end_date: DateTime
  entry_code: Int
  user_id: UserRelateToOneForCreateInput
}

type Plan {
  id: ID!
  user_id: User
  session_id: Session
  assignment_id: Assignment
  note: String
}

input PlanWhereUniqueInput {
  id: ID
}

input PlanWhereInput {
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  id: IDFilter
  user_id: UserWhereInput
  session_id: SessionWhereInput
  assignment_id: AssignmentWhereInput
  note: StringFilter
}

input PlanOrderByInput {
  id: OrderDirection
  note: OrderDirection
}

input PlanUpdateInput {
  user_id: UserRelateToOneForUpdateInput
  session_id: SessionRelateToOneForUpdateInput
  assignment_id: AssignmentRelateToOneForUpdateInput
  note: String
}

input SessionRelateToOneForUpdateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
  disconnect: Boolean
}

input AssignmentRelateToOneForUpdateInput {
  create: AssignmentCreateInput
  connect: AssignmentWhereUniqueInput
  disconnect: Boolean
}

input PlanUpdateArgs {
  where: PlanWhereUniqueInput!
  data: PlanUpdateInput!
}

input PlanCreateInput {
  user_id: UserRelateToOneForCreateInput
  session_id: SessionRelateToOneForCreateInput
  assignment_id: AssignmentRelateToOneForCreateInput
  note: String
}

input SessionRelateToOneForCreateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

input AssignmentRelateToOneForCreateInput {
  create: AssignmentCreateInput
  connect: AssignmentWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createMediaTable(data: MediaTableCreateInput!): MediaTable
  createMediaTables(data: [MediaTableCreateInput!]!): [MediaTable]
  updateMediaTable(
    where: MediaTableWhereUniqueInput!
    data: MediaTableUpdateInput!
  ): MediaTable
  updateMediaTables(data: [MediaTableUpdateArgs!]!): [MediaTable]
  deleteMediaTable(where: MediaTableWhereUniqueInput!): MediaTable
  deleteMediaTables(where: [MediaTableWhereUniqueInput!]!): [MediaTable]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(
    where: AudioFileWhereUniqueInput!
    data: AudioFileUpdateInput!
  ): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(
    where: ContentWhereUniqueInput!
    data: ContentUpdateInput!
  ): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(
    where: QuestionWhereUniqueInput!
    data: QuestionUpdateInput!
  ): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createAnswer(data: AnswerCreateInput!): Answer
  createAnswers(data: [AnswerCreateInput!]!): [Answer]
  updateAnswer(where: AnswerWhereUniqueInput!, data: AnswerUpdateInput!): Answer
  updateAnswers(data: [AnswerUpdateArgs!]!): [Answer]
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteAnswers(where: [AnswerWhereUniqueInput!]!): [Answer]
  createAssignment(data: AssignmentCreateInput!): Assignment
  createAssignments(data: [AssignmentCreateInput!]!): [Assignment]
  updateAssignment(
    where: AssignmentWhereUniqueInput!
    data: AssignmentUpdateInput!
  ): Assignment
  updateAssignments(data: [AssignmentUpdateArgs!]!): [Assignment]
  deleteAssignment(where: AssignmentWhereUniqueInput!): Assignment
  deleteAssignments(where: [AssignmentWhereUniqueInput!]!): [Assignment]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(
    where: SessionWhereUniqueInput!
    data: SessionUpdateInput!
  ): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createPlan(data: PlanCreateInput!): Plan
  createPlans(data: [PlanCreateInput!]!): [Plan]
  updatePlan(where: PlanWhereUniqueInput!, data: PlanUpdateInput!): Plan
  updatePlans(data: [PlanUpdateArgs!]!): [Plan]
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deletePlans(where: [PlanWhereUniqueInput!]!): [Plan]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  mediaTables(
    where: MediaTableWhereInput! = {}
    orderBy: [MediaTableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaTable!]
  mediaTable(where: MediaTableWhereUniqueInput!): MediaTable
  mediaTablesCount(where: MediaTableWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  videos(
    where: VideoWhereInput! = {}
    orderBy: [VideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  audioFiles(
    where: AudioFileWhereInput! = {}
    orderBy: [AudioFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  contents(
    where: ContentWhereInput! = {}
    orderBy: [ContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  questions(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  answers(
    where: AnswerWhereInput! = {}
    orderBy: [AnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Answer!]
  answer(where: AnswerWhereUniqueInput!): Answer
  answersCount(where: AnswerWhereInput! = {}): Int
  assignments(
    where: AssignmentWhereInput! = {}
    orderBy: [AssignmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Assignment!]
  assignment(where: AssignmentWhereUniqueInput!): Assignment
  assignmentsCount(where: AssignmentWhereInput! = {}): Int
  sessions(
    where: SessionWhereInput! = {}
    orderBy: [SessionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Session!]
  session(where: SessionWhereUniqueInput!): Session
  sessionsCount(where: SessionWhereInput! = {}): Int
  plans(
    where: PlanWhereInput! = {}
    orderBy: [PlanOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Plan!]
  plan(where: PlanWhereUniqueInput!): Plan
  plansCount(where: PlanWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
